// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// black_price
NumericVector black_price(NumericVector forward, NumericVector strike, NumericVector sigma, NumericVector tenor, NumericVector callput);
RcppExport SEXP _letsberational_black_price(SEXP forwardSEXP, SEXP strikeSEXP, SEXP sigmaSEXP, SEXP tenorSEXP, SEXP callputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type forward(forwardSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type strike(strikeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tenor(tenorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type callput(callputSEXP);
    rcpp_result_gen = Rcpp::wrap(black_price(forward, strike, sigma, tenor, callput));
    return rcpp_result_gen;
END_RCPP
}
// bachelier_price
NumericVector bachelier_price(NumericVector forward, NumericVector strike, NumericVector sigma, NumericVector tenor, NumericVector callput);
RcppExport SEXP _letsberational_bachelier_price(SEXP forwardSEXP, SEXP strikeSEXP, SEXP sigmaSEXP, SEXP tenorSEXP, SEXP callputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type forward(forwardSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type strike(strikeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tenor(tenorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type callput(callputSEXP);
    rcpp_result_gen = Rcpp::wrap(bachelier_price(forward, strike, sigma, tenor, callput));
    return rcpp_result_gen;
END_RCPP
}
// black_volatility
NumericVector black_volatility(NumericVector price, NumericVector forward, NumericVector strike, NumericVector tenor, NumericVector callput);
RcppExport SEXP _letsberational_black_volatility(SEXP priceSEXP, SEXP forwardSEXP, SEXP strikeSEXP, SEXP tenorSEXP, SEXP callputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type price(priceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type forward(forwardSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type strike(strikeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tenor(tenorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type callput(callputSEXP);
    rcpp_result_gen = Rcpp::wrap(black_volatility(price, forward, strike, tenor, callput));
    return rcpp_result_gen;
END_RCPP
}
// bachelier_volatility
NumericVector bachelier_volatility(NumericVector price, NumericVector forward, NumericVector strike, NumericVector tenor, NumericVector callput);
RcppExport SEXP _letsberational_bachelier_volatility(SEXP priceSEXP, SEXP forwardSEXP, SEXP strikeSEXP, SEXP tenorSEXP, SEXP callputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type price(priceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type forward(forwardSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type strike(strikeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tenor(tenorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type callput(callputSEXP);
    rcpp_result_gen = Rcpp::wrap(bachelier_volatility(price, forward, strike, tenor, callput));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_letsberational_black_price", (DL_FUNC) &_letsberational_black_price, 5},
    {"_letsberational_bachelier_price", (DL_FUNC) &_letsberational_bachelier_price, 5},
    {"_letsberational_black_volatility", (DL_FUNC) &_letsberational_black_volatility, 5},
    {"_letsberational_bachelier_volatility", (DL_FUNC) &_letsberational_bachelier_volatility, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_letsberational(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
